{"name":"CreateMacros","type":"script","author":"rdxUOt7EtLguWyxp","img":"icons/sundries/books/book-stack.webp","scope":"global","command":"//Create array of macro Names and set advanced-macros \"Run as GM\" flag\n//There was an issue when creating compendiums that forced me to circumvent it and set it afterwards for consistency\nlet macroArray = [\n    {\n        name: \"Create New Pattern\",\n        type: \"script\",\n        img: \"icons/sundries/scrolls/scroll-writing-grey.webp\",\n        command: `//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`PressurePlate\\`;\n        var mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        var journalGMName = game.journal.getName(\"GMSolution\");\n        \n        //This is where I define the path to each animations. file is the folder and each animation is stored into its own variable \n        let file = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        \n        let aa = \\`\\${file}BassClef_01_Regular_Blue_200x200.webm\\`;\n        let ab = \\`\\${file}BassClef_01_Regular_Green_200x200.webm\\`;\n        let ac = \\`\\${file}BassClef_01_Regular_Orange_200x200.webm\\`;\n        let ad = \\`\\${file}BassClef_01_Regular_Purple_200x200.webm\\`;\n        let ae = \\`\\${file}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n        let af = \\`\\${file}TrebleClef_01_Regular_Green_200x200.webm\\`;\n        let ag = \\`\\${file}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        let ah = \\`\\${file}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n        \n        let ba = \\`\\${file}Flat_01_Regular_Blue_200x200.webm\\`;\n        let bb = \\`\\${file}Flat_01_Regular_Green_200x200.webm\\`;\n        let bc = \\`\\${file}Flat_01_Regular_Orange_200x200.webm\\`;\n        let bd = \\`\\${file}Flat_01_Regular_Purple_200x200.webm\\`;\n        let be = \\`\\${file}Sharp_01_Regular_Blue_200x200.webm\\`;\n        let bf = \\`\\${file}Sharp_01_Regular_Green_200x200.webm\\`;\n        let bg = \\`\\${file}Sharp_01_Regular_Orange_200x200.webm\\`;\n        let bh = \\`\\${file}Sharp_01_Regular_Purple_200x200.webm\\`;\n        \n        let ca = \\`\\${file}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n        let cb = \\`\\${file}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n        let cc = \\`\\${file}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        let cd = \\`\\${file}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n        let ce = \\`\\${file}Crotchet_01_Regular_Blue_200x200.webm\\`;\n        let cf = \\`\\${file}Crotchet_01_Regular_Green_200x200.webm\\`;\n        let cg = \\`\\${file}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        let ch = \\`\\${file}Crotchet_01_Regular_Purple_200x200.webm\\`;\n        let ci = \\`\\${file}Quaver_01_Regular_Blue_200x200.webm\\`;\n        let cj = \\`\\${file}Quaver_01_Regular_Green_200x200.webm\\`;\n        let ck = \\`\\${file}Quaver_01_Regular_Orange_200x200.webm\\`;\n        let cl = \\`\\${file}Quaver_01_Regular_Purple_200x200.webm\\`;\n        \n        \n        //Pull a random colour from the BassClef or TrebleClef animations\n        function random_itemA(itemsA)\n        {\n        return itemsA[Math.floor(Math.random()*itemsA.length)];\n        }\n        \n        var itemsA = [aa, ab, ac, ad, ae, af, ag, ah];\n        \n        //Sharp or Flat\n        function random_itemB(itemsB)\n        {\n        return itemsB[Math.floor(Math.random()*itemsB.length)];\n        }\n        \n        var itemsB = [ba, bb ,bc, bd, be, bf, bg, bh];\n        \n        //Notes\n        function random_itemC(itemsC)\n        {\n        return itemsC[Math.floor(Math.random()*itemsC.length)];\n        }\n        \n        var itemsC = [ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl];\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function CastA() {\n            \n            \n            let spellAnim = \n                                {\n                                 file: random_itemA(itemsA),\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: 1,\n                                   y: 1\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (500);\n            \n            //Here, I'm manipulating html text to truncate the path and replace it with the one for the webp thumbnail image\n            //that I'll use to paste in the journal entry\n            const path = spellAnim.file.substr(52);\n            const thumb = path.slice(0, -12) + \"Thumb.webp\";\n            const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n            const imgWidth = \"100\";\n            \n            //define \"content\" that will be pasted into the GM's Journal Entry\n            const content = \\` <img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            \n            //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n            journalGMName.update({content: content});\n            \n            \n            }\n            \n            async function CastB() {\n              \n              \n              let spellAnim = \n                                  {\n                                   file: random_itemB(itemsB),\n                                    position: mainTarget.center,\n                                    anchor: {\n                                     x: 0.5,\n                                     y: 1\n                                    },\n                                    angle: 0,\n                                    scale: {\n                                     x: 1,\n                                     y: 1\n                                    }\n                                  }; \n              canvas.specials.playVideo(spellAnim);\n              game.socket.emit('module.fxmaster', spellAnim);\n              await wait (500);\n              var source = canvas.tokens.controlled[0];\n              var path = spellAnim.file.substr(52);\n              var thumb = path.slice(0, -12) + \"Thumb.webp\";\n              var webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n              var imgWidth = \"100\";\n            \n            \n              const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n              \n              journalGMName.update({content: journalGMName.data.content + content});\n            \n              }\n              \n              async function CastC() {\n                \n                \n                let spellAnim = \n                                    {\n                                     file: random_itemC(itemsC),\n                                      position: mainTarget.center,\n                                      anchor: {\n                                       x: 0.5,\n                                       y: 1\n                                      },\n                                      angle: 0,\n                                      scale: {\n                                       x: 1,\n                                       y: 1\n                                      }\n                                    }; \n                canvas.specials.playVideo(spellAnim);\n                game.socket.emit('module.fxmaster', spellAnim);\n                await wait (500);\n                var source = canvas.tokens.controlled[0];\n                var path = spellAnim.file.substr(52);\n                var thumb = path.slice(0, -12) + \"Thumb.webp\";\n                var webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n                var imgWidth = \"100\";\n                \n            \n                const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n              journalGMName.update({content: journalGMName.data.content + content});    \n                }\n                \n                //ChatMessage to GM\n            /*var source = canvas.tokens.controlled[0];\n            ChatMessage.create({\n              //Here I'm telling who has stepped onto the plate and reset the pattern\n              speaker: ChatMessage.getSpeaker(source),\n              //I'm also linking the two Journal entries into a ChatCard only visible by the GM\n              //journal01 = journalGMName.data.name;\n              //journal02 = journalPName.data.name;\n              content: \\`\\${source.data.name} changed the pattern ! <br> @JournalEntry[\\${journalGMName.data.name}] <br> @JournalEntry[\\${journalPName.data.name}]\\`,\n              type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n              whisper : ChatMessage.getWhisperRecipients(\"GM\")\n            });\n            */\n                \n             //Now all the functions are ready to be executed. \"CastA\" once, \"CastB\" once and \"CastC\" twice, close the all thing \n             //and call the overall function called \"PressurePlate\"\n            CastA ();\n            await wait (750);\n            CastB();\n            await wait (750);\n            CastC ();\n            await wait (750);\n            CastC ();\n            await wait (750);`  \n    },\n    {\n        name: \"CreateMacroDoors\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `//This macro will create another macro, storing the Ids of the tiles selected in an array.\n        var myDoorsArray = Array.from(canvas.walls.controlled);\n        var myDoorsIDArray = new Array();\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function TilesToggle() {\n            \n            \n            for (var i = 0; i < myDoorsArray.length; i++) {\n            let doorID = myDoorsArray[i].id;\n            myDoorsIDArray[i] = doorID;\n            }\n            const myDoorsIDArrayStr = JSON.stringify(myDoorsIDArray);\n           \n            await wait (75);\n            var command = \\`//This macro will toglle the state of doors from their ID\n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function DoorsToggle() {\n        var myDoorsIDArray = \\${myDoorsIDArrayStr};\n        \n        for (var i = 0; i < myDoorsIDArray.length; i++) {\n        \n        let doorID = myDoorsIDArray[i];\n        const door = canvas.walls.get(doorID);\n        if(door) await canvas.scene.updateEmbeddedDocuments('Wall',[{_id: doorID, ds: door.data.ds ? 0 : 1 }]);\n        await wait (250);\n        \n        }\n        await wait (75);\n        }\n        \n        DoorsToggle();\\`;\n        \n            \n            var macro = await Macro.create({\n                name: \"Doors State Toggle\",\n                type: \"script\",\n                img: \"icons/svg/door-exit.svg\",\n                command: \\`\\${command}\\`,\n                \"flags\": {\n                    \"advanced-macros\": {\n                      \"runAsGM\": true\n                    }}\n            }, {displaySheet: false});\n         \n        \n        }\n        TilesToggle();\n        \n        console.log(myDoorsIDArray);`  \n    },\n    {\n        name: \"CreateMacroTiles\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `//Select the tiles you want to hide or reveal by stepping on to the \"Tiles Visibility Toggle\" Token/Plate and execute this macro.\n        //As it stands, it only works for background Tiles or 'underFoot' Tiles in FoundryVTT version 0.8.6\n        //It will create a macro called \"Tiles Visibility Toggle\". Afterwards, execute the \"PopulateTriggerJournalEntry\" macro (Everytime you create a macro, the id changes even if the name is the same but careful not to have two macros with the same name !\n        \n        //Let's create an array of the controlled (selected) tiles on the canvas and store their id into another array\n        var myBgdTilesArray = canvas.background.controlled;\n        var myTilesIDArray = new Array();\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function TilesToggle() {\n            \n           \n            for (var i = 0; i < myBgdTilesArray.length; i++) {\n            let tileID = myBgdTilesArray[i].id;\n            myTilesIDArray[i] = tileID;\n            }    \n        const myTilesIDArrayStr = JSON.stringify(myTilesIDArray);\n           \n            await wait (75);\n        //everything in between backticks stored into the variable \"command\" will be the code for the \"Tiles Visibility Toggle\" macro !\n            var command = \\`//This macro will toglle the visibility of a tile from its ID \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            async function TilesToggle() {\n                \n                var myTilesIDArray = \\${myTilesIDArrayStr};\n            \n            \n               for (var i = 0; i < myTilesIDArray.length; i++) {\n                \n                let tileID = myTilesIDArray[i];\n                const tile = canvas.background.get(tileID);\n                if(tile) await canvas.scene.updateEmbeddedDocuments('Tile',[{_id: tile.id, hidden : !tile.data.hidden }]);\n                await wait (250);\n            \n                }\n                await wait (75);\n            }\n            \n                TilesToggle();\\`;\n            \n            var macro = await Macro.create({\n                name: \"Tiles Visibility Toggle\",\n                type: \"script\",\n                img: \"icons/svg/eye.svg\",\n                command: \\`\\${command}\\`,\n                \"flags\": {\n                    \"advanced-macros\": {\n                      \"runAsGM\": true\n                    }}\n            }, {displaySheet: false});\n         \n        \n        }\n        TilesToggle();`  \n    },\n    {\n        name: \"PopulateTriggerJournalEntry\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `let macroPP = game.macros.getName(\"PressurePlate\").id;\n        let macroTVT = game.macros.getName(\"Tiles Visibility Toggle\").id;\n        let macroBCB = game.macros.getName(\"BassClef Blue\").id;\n        let macroBCG = game.macros.getName(\"BassClef Green\").id;\n        let macroBCO = game.macros.getName(\"BassClef Orange\").id;\n        let macroBCP = game.macros.getName(\"BassClef Purple\").id;\n        let macroBQB = game.macros.getName(\"TrebleClef Blue\").id;\n        let macroBQG = game.macros.getName(\"TrebleClef Green\").id;\n        let macroBQO = game.macros.getName(\"TrebleClef Orange\").id;\n        let macroBQP = game.macros.getName(\"TrebleClef Purple\").id;\n        let macroCB = game.macros.getName(\"Flat Blue\").id;\n        let macroCG = game.macros.getName(\"Flat Green\").id;\n        let macroCO = game.macros.getName(\"Flat Orange\").id;\n        let macroCP = game.macros.getName(\"Flat Purple\").id;\n        let macroFB = game.macros.getName(\"Sharp Blue\").id;\n        let macroFG = game.macros.getName(\"Sharp Green\").id;\n        let macroFO = game.macros.getName(\"Sharp Orange\").id;\n        let macroFP = game.macros.getName(\"Sharp Purple\").id;\n        let macroQB = game.macros.getName(\"BeamedQuavers Blue\").id;\n        let macroQG = game.macros.getName(\"BeamedQuavers Green\").id;\n        let macroQO = game.macros.getName(\"BeamedQuavers Orange\").id;\n        let macroQP = game.macros.getName(\"BeamedQuavers Purple\").id;\n        let macroSB = game.macros.getName(\"Crotchet Blue\").id;\n        let macroSG = game.macros.getName(\"Crotchet Green\").id;\n        let macroSO = game.macros.getName(\"Crotchet Orange\").id;\n        let macroSP = game.macros.getName(\"Crotchet Purple\").id;\n        let macroTCB = game.macros.getName(\"Quaver Blue\").id;\n        let macroTCG = game.macros.getName(\"Quaver Green\").id;\n        let macroTCO = game.macros.getName(\"Quaver Orange\").id;\n        let macroTCP = game.macros.getName(\"Quaver Purple\").id;\n        \n        \n        \n        \n        var journalTrigger = game.journal.getName(\"Trigger\");\n        \n        //define the \"content\" that will be pasted into the Trigger Journal Entry\n        const content = \"@Token[PressurePlate]@Trigger[capture move]@Macro[\" + macroPP +  \"]{PressurePlate}\"+\"<br>\"+\n        \"@Token[Tiles Visibility Toggle]@Trigger[capture move]@Macro[\" + macroTVT + \"]{Tiles Visibility Toggle}\"+\"<br><br>\"+\n        \"@Token[BassClef Blue]@Trigger[capture move]@Macro[\" + macroBCB + \"]{BassClef Blue}\"+\"<br>\"+\n        \"@Token[BassClef Green]@Trigger[capture move]@Macro[\" + macroBCG + \"]{BassClef Green}\"+\"<br>\"+\n        \"@Token[BassClef Orange]@Trigger[capture move]@Macro[\" + macroBCO + \"]{BassClef Orange}\"+\"<br>\"+\n        \"@Token[BassClef Purple]@Trigger[capture move]@Macro[\" + macroBCP + \"]{BassClef Purple}\"+\"<br><br>\"+\n        \"@Token[TrebleClef Blue]@Trigger[capture move]@Macro[\" + macroBQB + \"]{TrebleClef Blue}\"+\"<br>\"+\n        \"@Token[TrebleClef Green]@Trigger[capture move]@Macro[\" + macroBQG + \"]{TrebleClef Green}\"+\"<br>\"+\n        \"@Token[TrebleClef Orange]@Trigger[capture move]@Macro[\" + macroBQO + \"]{TrebleClef Orange}\"+\"<br>\"+\n        \"@Token[TrebleClef Purple]@Trigger[capture move]@Macro[\" + macroBQP + \"]{TrebleClef Purple}\"+\"<br><br>\"+\n        \"@Token[Flat Blue]@Trigger[capture move]@Macro[\" + macroCB  + \"]{Flat Blue}\"+\"<br>\"+\n        \"@Token[Flat Green]@Trigger[capture move]@Macro[\" + macroCG  + \"]{Flat Green}\"+\"<br>\"+\n        \"@Token[Flat Orange]@Trigger[capture move]@Macro[\" + macroCO  + \"]{Flat Orange}\"+\"<br>\"+\n        \"@Token[Flat Purple]@Trigger[capture move]@Macro[\" + macroCP  + \"]{Flat Purple}\"+\"<br><br>\"+\n        \"@Token[Sharp Blue]@Trigger[capture move]@Macro[\" + macroFB  + \"]{Sharp Blue}\"+\"<br>\"+\n        \"@Token[Sharp Green]@Trigger[capture move]@Macro[\" + macroFG  + \"]{Sharp Green}\"+\"<br>\"+\n        \"@Token[Sharp Orange]@Trigger[capture move]@Macro[\" + macroFO  + \"]{Sharp Orange}\"+\"<br>\"+\n        \"@Token[Sharp Purple]@Trigger[capture move]@Macro[\" + macroFP  + \"]{Sharp Purple}\"+\"<br><br>\"+\n        \"@Token[Beamed Quavers Blue]@Trigger[capture move]@Macro[\" + macroQB  + \"]{BeamedQuavers Blue}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Green]@Trigger[capture move]@Macro[\" + macroQG  + \"]{BeamedQuavers Green}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Orange]@Trigger[capture move]@Macro[\" + macroQO  + \"]{BeamedQuavers Orange}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Purple]@Trigger[capture move]@Macro[\" + macroQP  + \"]{BeamedQuavers Purple}\"+\"<br><br>\"+\n        \"@Token[Crotchet Blue]@Trigger[capture move]@Macro[\" + macroSB  + \"]{Crotchet Blue}\"+\"<br>\"+\n        \"@Token[Crotchet Green]@Trigger[capture move]@Macro[\" + macroSG  + \"]{Crotchet Green}\"+\"<br>\"+\n        \"@Token[Crotchet Orange]@Trigger[capture move]@Macro[\" + macroSO  + \"]{Crotchet Orange}\"+\"<br>\"+\n        \"@Token[Crotchet Purple]@Trigger[capture move]@Macro[\" + macroSP  + \"]{Crotchet Purple}\"+\"<br><br>\"+\n        \"@Token[Quaver Blue]@Trigger[capture move]@Macro[\" + macroTCB + \"]{Quaver Blue}\"+\"<br>\"+\n        \"@Token[Quaver Green]@Trigger[capture move]@Macro[\" + macroTCG + \"]{Quaver Green}\"+\"<br>\"+\n        \"@Token[Quaver Orange]@Trigger[capture move]@Macro[\" + macroTCO + \"]{Quaver Orange}\"+\"<br>\"+\n        \"@Token[Quaver Purple]@Trigger[capture move]@Macro[\" + macroTCP + \"]{Quaver Purple}\"+\"<br><hr>\";\n        \n        //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n        journalTrigger.update({content: content});`  \n    },\n    {\n        name: \"PressurePlate\",\n        type: \"script\",\n        img: \"icons/environment/traps/pressure-plate.webp\",\n        command: `//These lines starting with a \"//\" or surrounded by \"/*\" and \"*/\" are comments that are ignored when executing the macro.\n        //This macro checks the content of two Journal Entries. If they're the same, the players have solved it \n        //and the doors will open. \n        //I've added a Timer that will reset the chamber after a few seconds !\n        \n        //We define here the name of the two Journal Entries we're going to check against each other\n        var journalGMName = game.journal.getName(\"GMSolution\");\n        var journalPName = game.journal.getName(\"PlayerEntry\");\n        \n        //Let's define the Pressure Plate as well so we can play the animation from it.\n        const plateName = \\`PressurePlate\\`;\n        var mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        \n        //This is where I define the path to each animations. file is the folder and each animation is stored into its own variable \n        let file = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        \n        let aa = \\`\\${file}BassClef_01_Regular_Blue_200x200.webm\\`;\n        let ab = \\`\\${file}BassClef_01_Regular_Green_200x200.webm\\`;\n        let ac = \\`\\${file}BassClef_01_Regular_Orange_200x200.webm\\`;\n        let ad = \\`\\${file}BassClef_01_Regular_Purple_200x200.webm\\`;\n        let ae = \\`\\${file}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n        let af = \\`\\${file}TrebleClef_01_Regular_Green_200x200.webm\\`;\n        let ag = \\`\\${file}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        let ah = \\`\\${file}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n        \n        let ba = \\`\\${file}Flat_01_Regular_Blue_200x200.webm\\`;\n        let bb = \\`\\${file}Flat_01_Regular_Green_200x200.webm\\`;\n        let bc = \\`\\${file}Flat_01_Regular_Orange_200x200.webm\\`;\n        let bd = \\`\\${file}Flat_01_Regular_Purple_200x200.webm\\`;\n        let be = \\`\\${file}Sharp_01_Regular_Blue_200x200.webm\\`;\n        let bf = \\`\\${file}Sharp_01_Regular_Green_200x200.webm\\`;\n        let bg = \\`\\${file}Sharp_01_Regular_Orange_200x200.webm\\`;\n        let bh = \\`\\${file}Sharp_01_Regular_Purple_200x200.webm\\`;\n        \n        let ca = \\`\\${file}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n        let cb = \\`\\${file}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n        let cc = \\`\\${file}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        let cd = \\`\\${file}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n        let ce = \\`\\${file}Crotchet_01_Regular_Blue_200x200.webm\\`;\n        let cf = \\`\\${file}Crotchet_01_Regular_Green_200x200.webm\\`;\n        let cg = \\`\\${file}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        let ch = \\`\\${file}Crotchet_01_Regular_Purple_200x200.webm\\`;\n        let ci = \\`\\${file}Quaver_01_Regular_Blue_200x200.webm\\`;\n        let cj = \\`\\${file}Quaver_01_Regular_Green_200x200.webm\\`;\n        let ck = \\`\\${file}Quaver_01_Regular_Orange_200x200.webm\\`;\n        let cl = \\`\\${file}Quaver_01_Regular_Purple_200x200.webm\\`;\n        \n        \n        //Pull a random colour from the BassClef or TrebleClef animations\n        function random_itemA(itemsA)\n        {\n        return itemsA[Math.floor(Math.random()*itemsA.length)];\n        }\n        \n        var itemsA = [aa, ab, ac, ad, ae, af, ag, ah];\n        \n        //Sharp or Flat\n        function random_itemB(itemsB)\n        {\n        return itemsB[Math.floor(Math.random()*itemsB.length)];\n        }\n        \n        var itemsB = [ba, bb ,bc, bd, be, bf, bg, bh];\n        \n        //Notes\n        function random_itemC(itemsC)\n        {\n        return itemsC[Math.floor(Math.random()*itemsC.length)];\n        }\n        \n        var itemsC = [ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl];\n        \n        \n        \n        \n        //This returns an error to the user if FXMaster is not installed\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        //This whole \"Pressure Plate\" function will be executed at the end. We use an if statement to check if the two journal entries are exactly the same.\n        //If they are, we open the three doors, reveal the portal. They've done it !\n        //if not (what is in the else statement) We reset the puzzle, cast the new four animations pattern, paste it in the GM Journal Entry, reset the Player's Journal Entry,\n        //and close the doors and hide the tiles and we send a message to the GM with links to the Journal Entries !\n        async function PressurePlate() {\n        \n        //The console.log allows to output some text, for example here, to check if the function has been executed.\n        //console.log(\"Inside the PressurePlate Function\");\n        \n        //The if statement below means this : if journal entries are the same, Puzzle is resolved, the doors open and the tile (portal) is revealed \n        if (journalGMName.data.content === journalPName.data.content){\n          \n          //Let's call the macro that toggle the doors open (if they're already open, they will close instead ! )\n          const DoorsStateToggle = game.macros.getName(\"Doors State Toggle\");\n          DoorsStateToggle.execute();\n          //We set an await, a delay in milliseconds, 1000 will roughly be equivalent to 1 second.\n          \n            //This is the countdown timer section\n          journalPName.update({content: \\`<h1>You have 5 seconds to exit the chamber</h1>\\`});\n          //We set an await, a delay in milliseconds, 1000 will roughly be equivalent to 1 second.\n          await wait (2000); \n          journalPName.update({content: \\`<h1>4</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>3</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>2</h1>\\`});\n          await wait (1000); \n          console.log(\"2\");\n          await wait (1000); \n          journalPName.update({content: \\`<h1>1</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>0</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\` \\`});\n          //Here we close the doors from the macro \"Door State Toggle\"\n          DoorsStateToggle.execute();\n          \n          //Here I'll trigger another macro that will only draw a new random pattern in the GM's Journal Entry\n          const pattern = game.macros.getName(\"Create New Pattern\");\n          await wait (100);\n          pattern.execute();\n          \n        \n        \n        }\n        // else (if 2 journal Entries are different, draw a new pattern as four animations, four images in the GM journal entry and reset the player's journal entry\n        else{\n          //We're going to prepare everything Foudnry will have to do when we call upon this \"CastA\"function\n          //We're picking at random from the items A which are the Treble Clefs and Bass Clefs. We'll do the same \n          //for the next function \"CastB\" but with sharps and flats, then all the notes will be picked at random \n          //in the  \"CastC\" function (that we'll call twice, we'll see that a bit later on)\n        async function CastA() {\n        \n        \n        let spellAnim = \n                            {\n                             file: random_itemA(itemsA),\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: 1,\n                               y: 1\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (500);\n        \n        //Here, I'm manipulating html text to truncate the path and replace it with the one for the webp thumbnail image\n        //that I'll use to paste in the journal entry\n        const path = spellAnim.file.substr(52);\n        const thumb = path.slice(0, -12) + \"Thumb.webp\";\n        const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n        const imgWidth = \"100\";\n        \n        //define \"content\" that will be pasted into the GM's Journal Entry\n        const content = \\` <img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        \n        //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n        journalGMName.update({content: content});\n        \n        \n        \n        }\n        async function CastB() {\n         \n          \n          let spellAnim = \n                              {\n                               file: random_itemB(itemsB),\n                                position: mainTarget.center,\n                                anchor: {\n                                 x: 0.5,\n                                 y: 1\n                                },\n                                angle: 0,\n                                scale: {\n                                 x: 1,\n                                 y: 1\n                                }\n                              }; \n          canvas.specials.playVideo(spellAnim);\n          game.socket.emit('module.fxmaster', spellAnim);\n          await wait (500);\n          const source = canvas.tokens.controlled[0];\n          const path = spellAnim.file.substr(52);\n          const thumb = path.slice(0, -12) + \"Thumb.webp\";\n          const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n          const imgWidth = \"100\";\n        \n        \n          const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n          \n          journalGMName.update({content: journalGMName.data.content + content});\n        \n          \n          }\n          async function CastC() {\n            \n            \n            let spellAnim = \n                                {\n                                 file: random_itemC(itemsC),\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: 1,\n                                   y: 1\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (500);\n            const source = canvas.tokens.controlled[0];\n            const path = spellAnim.file.substr(52);\n            const thumb = path.slice(0, -12) + \"Thumb.webp\";\n            const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n            const imgWidth = \"100\";\n            \n        \n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n          journalGMName.update({content: journalGMName.data.content + content});    \n            \n            }\n            \n        //ChatMessage to GM with the two Journal Entries linked remove the \"/*\" and \"*/\" to test it. It can clutter if there are two many PressurePlate activations !\n        /*\n        let chatData = {\n           \n          content: \\`Someone changed the pattern ! <br> @JournalEntry[\\${journalGMName.data.name}] <br> @JournalEntry[\\${journalPName.data.name}]\\`,\n          whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n        };\n        ChatMessage.create(chatData, {});\n        */\n        \n        \n         //Reset the Player's Journal Entry (with a single space to avoid a null)\n         const content = \\` \\`;\n         journalPName.update({content: content});\n        \n         //Now all the functions are ready to be executed. \"CastA\" once, \"CastB\" once and \"CastC\" twice, close the all thing \n         //and call the overall function called \"PressurePlate\"\n        CastA ();\n        await wait (750);\n        CastB();\n        await wait (750);\n        CastC ();\n        await wait (750);\n        CastC ();\n        await wait (750);\n          }\n        }\n        PressurePlate();`  \n    },\n    \n    {\n        name: \"BassClef Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`BassClef Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}BassClef_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"BassClef Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`BassClef Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}BassClef_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"BassClef Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`BassClef Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}BassClef_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"BassClef Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`BassClef Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}BassClef_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"TrebleClef Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`TrebleClef Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"TrebleClef Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`TrebleClef Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}TrebleClef_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"TrebleClef Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`TrebleClef Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"TrebleClef Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`TrebleClef Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Flat Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Flat Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Flat_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Flat Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Flat Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Flat_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Flat Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Flat Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Flat_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Flat Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Flat Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Flat_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Sharp Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Sharp Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Sharp_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Sharp Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Sharp Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Sharp_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Sharp Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Sharp Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Sharp_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Sharp Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Sharp Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Sharp_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Crotchet Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Crotchet Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Crotchet_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Crotchet Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Crotchet Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Crotchet_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Crotchet Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Crotchet Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Crotchet Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Crotchet Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Crotchet_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Quaver Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Quaver Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Quaver_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Quaver Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Quaver Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Quaver_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Quaver Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Quaver Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Quaver_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Quaver Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Quaver Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Quaver_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"BeamedQuavers Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Beamed Quavers Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"BeamedQuavers Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Beamed Quavers Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"BeamedQuavers Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Beamed Quavers Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"BeamedQuavers Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Beamed Quavers Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    }\n\n]\n\n\n\nfor (var i = 0; i < macroArray.length; i++) {\n\n    var macro = await Macro.create({\n        name: macroArray[i].name,\n        type: macroArray[i].type,\n        img: macroArray[i].img,\n        command: macroArray[i].command,\n        \"flags\": {\n            \"advanced-macros\": {\n                \"runAsGM\": true\n            }\n        }\n    }, { displaySheet: false });\n\n}","folder":null,"sort":0,"permission":{"default":0,"rdxUOt7EtLguWyxp":3},"flags":{"core":{"sourceId":"Macro.lXqk0P2h8fU0TcfK"},"advanced-macros":{"runAsGM":false}},"_id":"QALqeIlV8ZyzDRiP"}
{"_id":"QALqeIlV8ZyzDRiP","name":"CreateMacros","type":"script","author":"rdxUOt7EtLguWyxp","img":"icons/sundries/books/book-stack.webp","scope":"global","command":"//Create array of macro Names and set advanced-macros \"Run as GM\" flag\n//There was an issue when creating compendiums that forced me to circumvent it and set it afterwards for consistency\nlet macroArray = [\n    {\n        name: \"Create New Pattern\",\n        type: \"script\",\n        img: \"icons/sundries/scrolls/scroll-writing-grey.webp\",\n        command: `//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`PressurePlate\\`;\n        var mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        var journalGMName = game.journal.getName(\"GMSolution\");\n        \n        //This is where I define the path to each animations. file is the folder and each animation is stored into its own variable \n        let file = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        \n        let aa = \\`\\${file}BassClef_01_Regular_Blue_200x200.webm\\`;\n        let ab = \\`\\${file}BassClef_01_Regular_Green_200x200.webm\\`;\n        let ac = \\`\\${file}BassClef_01_Regular_Orange_200x200.webm\\`;\n        let ad = \\`\\${file}BassClef_01_Regular_Purple_200x200.webm\\`;\n        let ae = \\`\\${file}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n        let af = \\`\\${file}TrebleClef_01_Regular_Green_200x200.webm\\`;\n        let ag = \\`\\${file}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        let ah = \\`\\${file}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n        \n        let ba = \\`\\${file}Flat_01_Regular_Blue_200x200.webm\\`;\n        let bb = \\`\\${file}Flat_01_Regular_Green_200x200.webm\\`;\n        let bc = \\`\\${file}Flat_01_Regular_Orange_200x200.webm\\`;\n        let bd = \\`\\${file}Flat_01_Regular_Purple_200x200.webm\\`;\n        let be = \\`\\${file}Sharp_01_Regular_Blue_200x200.webm\\`;\n        let bf = \\`\\${file}Sharp_01_Regular_Green_200x200.webm\\`;\n        let bg = \\`\\${file}Sharp_01_Regular_Orange_200x200.webm\\`;\n        let bh = \\`\\${file}Sharp_01_Regular_Purple_200x200.webm\\`;\n        \n        let ca = \\`\\${file}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n        let cb = \\`\\${file}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n        let cc = \\`\\${file}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        let cd = \\`\\${file}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n        let ce = \\`\\${file}Crotchet_01_Regular_Blue_200x200.webm\\`;\n        let cf = \\`\\${file}Crotchet_01_Regular_Green_200x200.webm\\`;\n        let cg = \\`\\${file}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        let ch = \\`\\${file}Crotchet_01_Regular_Purple_200x200.webm\\`;\n        let ci = \\`\\${file}Quaver_01_Regular_Blue_200x200.webm\\`;\n        let cj = \\`\\${file}Quaver_01_Regular_Green_200x200.webm\\`;\n        let ck = \\`\\${file}Quaver_01_Regular_Orange_200x200.webm\\`;\n        let cl = \\`\\${file}Quaver_01_Regular_Purple_200x200.webm\\`;\n        \n        \n        //Pull a random colour from the BassClef or TrebleClef animations\n        function random_itemA(itemsA)\n        {\n        return itemsA[Math.floor(Math.random()*itemsA.length)];\n        }\n        \n        var itemsA = [aa, ab, ac, ad, ae, af, ag, ah];\n        \n        //Sharp or Flat\n        function random_itemB(itemsB)\n        {\n        return itemsB[Math.floor(Math.random()*itemsB.length)];\n        }\n        \n        var itemsB = [ba, bb ,bc, bd, be, bf, bg, bh];\n        \n        //Notes\n        function random_itemC(itemsC)\n        {\n        return itemsC[Math.floor(Math.random()*itemsC.length)];\n        }\n        \n        var itemsC = [ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl];\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function CastA() {\n            \n            \n            let spellAnim = \n                                {\n                                 file: random_itemA(itemsA),\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: 1,\n                                   y: 1\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (500);\n            \n            //Here, I'm manipulating html text to truncate the path and replace it with the one for the webp thumbnail image\n            //that I'll use to paste in the journal entry\n            const path = spellAnim.file.substr(52);\n            const thumb = path.slice(0, -12) + \"Thumb.webp\";\n            const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n            const imgWidth = \"100\";\n            \n            //define \"content\" that will be pasted into the GM's Journal Entry\n            const content = \\` <img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            \n            //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n            journalGMName.update({content: content});\n            \n            \n            }\n            \n            async function CastB() {\n              \n              \n              let spellAnim = \n                                  {\n                                   file: random_itemB(itemsB),\n                                    position: mainTarget.center,\n                                    anchor: {\n                                     x: 0.5,\n                                     y: 1\n                                    },\n                                    angle: 0,\n                                    scale: {\n                                     x: 1,\n                                     y: 1\n                                    }\n                                  }; \n              canvas.specials.playVideo(spellAnim);\n              game.socket.emit('module.fxmaster', spellAnim);\n              await wait (500);\n              var source = canvas.tokens.controlled[0];\n              var path = spellAnim.file.substr(52);\n              var thumb = path.slice(0, -12) + \"Thumb.webp\";\n              var webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n              var imgWidth = \"100\";\n            \n            \n              const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n              \n              journalGMName.update({content: journalGMName.data.content + content});\n            \n              }\n              \n              async function CastC() {\n                \n                \n                let spellAnim = \n                                    {\n                                     file: random_itemC(itemsC),\n                                      position: mainTarget.center,\n                                      anchor: {\n                                       x: 0.5,\n                                       y: 1\n                                      },\n                                      angle: 0,\n                                      scale: {\n                                       x: 1,\n                                       y: 1\n                                      }\n                                    }; \n                canvas.specials.playVideo(spellAnim);\n                game.socket.emit('module.fxmaster', spellAnim);\n                await wait (500);\n                var source = canvas.tokens.controlled[0];\n                var path = spellAnim.file.substr(52);\n                var thumb = path.slice(0, -12) + \"Thumb.webp\";\n                var webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n                var imgWidth = \"100\";\n                \n            \n                const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n              journalGMName.update({content: journalGMName.data.content + content});    \n                }\n                \n                //ChatMessage to GM\n            /*var source = canvas.tokens.controlled[0];\n            ChatMessage.create({\n              //Here I'm telling who has stepped onto the plate and reset the pattern\n              speaker: ChatMessage.getSpeaker(source),\n              //I'm also linking the two Journal entries into a ChatCard only visible by the GM\n              //journal01 = journalGMName.data.name;\n              //journal02 = journalPName.data.name;\n              content: \\`\\${source.data.name} changed the pattern ! <br> @JournalEntry[\\${journalGMName.data.name}] <br> @JournalEntry[\\${journalPName.data.name}]\\`,\n              type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n              whisper : ChatMessage.getWhisperRecipients(\"GM\")\n            });\n            */\n                \n             //Now all the functions are ready to be executed. \"CastA\" once, \"CastB\" once and \"CastC\" twice, close the all thing \n             //and call the overall function called \"PressurePlate\"\n            CastA ();\n            await wait (750);\n            CastB();\n            await wait (750);\n            CastC ();\n            await wait (750);\n            CastC ();\n            await wait (750);`  \n    },\n    {\n        name: \"CreateMacroDoors\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `//This macro will create another macro, storing the Ids of the tiles selected in an array.\n        var myDoorsArray = Array.from(canvas.walls.controlled);\n        var myDoorsIDArray = new Array();\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function TilesToggle() {\n            \n            \n            for (var i = 0; i < myDoorsArray.length; i++) {\n            let doorID = myDoorsArray[i].id;\n            myDoorsIDArray[i] = doorID;\n            }\n            const myDoorsIDArrayStr = JSON.stringify(myDoorsIDArray);\n           \n            await wait (75);\n            var command = \\`//This macro will toglle the state of doors from their ID\n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function DoorsToggle() {\n        var myDoorsIDArray = \\${myDoorsIDArrayStr};\n        \n        for (var i = 0; i < myDoorsIDArray.length; i++) {\n        \n        let doorID = myDoorsIDArray[i];\n        const door = canvas.walls.get(doorID);\n        if(door) await canvas.scene.updateEmbeddedDocuments('Wall',[{_id: doorID, ds: door.data.ds ? 0 : 1 }]);\n        await wait (250);\n        \n        }\n        await wait (75);\n        }\n        \n        DoorsToggle();\\`;\n        \n            \n            var macro = await Macro.create({\n                name: \"Doors State Toggle\",\n                type: \"script\",\n                img: \"icons/svg/door-exit.svg\",\n                command: \\`\\${command}\\`,\n                \"flags\": {\n                    \"advanced-macros\": {\n                      \"runAsGM\": true\n                    }}\n            }, {displaySheet: false});\n         \n        \n        }\n        TilesToggle();\n        \n        console.log(myDoorsIDArray);`  \n    },\n    {\n        name: \"CreateMacroTiles\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `//Select the tiles you want to hide or reveal by stepping on to the \"Tiles Visibility Toggle\" Token/Plate and execute this macro.\n        //As it stands, it only works for background Tiles or 'underFoot' Tiles in FoundryVTT version 0.8.6\n        //It will create a macro called \"Tiles Visibility Toggle\". Afterwards, execute the \"PopulateTriggerJournalEntry\" macro (Everytime you create a macro, the id changes even if the name is the same but careful not to have two macros with the same name !\n        \n        //Let's create an array of the controlled (selected) tiles on the canvas and store their id into another array\n        var myBgdTilesArray = canvas.background.controlled;\n        var myTilesIDArray = new Array();\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        async function TilesToggle() {\n            \n           \n            for (var i = 0; i < myBgdTilesArray.length; i++) {\n            let tileID = myBgdTilesArray[i].id;\n            myTilesIDArray[i] = tileID;\n            }    \n        const myTilesIDArrayStr = JSON.stringify(myTilesIDArray);\n           \n            await wait (75);\n        //everything in between backticks stored into the variable \"command\" will be the code for the \"Tiles Visibility Toggle\" macro !\n            var command = \\`//This macro will toglle the visibility of a tile from its ID \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            async function TilesToggle() {\n                \n                var myTilesIDArray = \\${myTilesIDArrayStr};\n            \n            \n               for (var i = 0; i < myTilesIDArray.length; i++) {\n                \n                let tileID = myTilesIDArray[i];\n                const tile = canvas.background.get(tileID);\n                if(tile) await canvas.scene.updateEmbeddedDocuments('Tile',[{_id: tile.id, hidden : !tile.data.hidden }]);\n                await wait (250);\n            \n                }\n                await wait (75);\n            }\n            \n                TilesToggle();\\`;\n            \n            var macro = await Macro.create({\n                name: \"Tiles Visibility Toggle\",\n                type: \"script\",\n                img: \"icons/svg/eye.svg\",\n                command: \\`\\${command}\\`,\n                \"flags\": {\n                    \"advanced-macros\": {\n                      \"runAsGM\": true\n                    }}\n            }, {displaySheet: false});\n         \n        \n        }\n        TilesToggle();`  \n    },\n    {\n        name: \"PopulateTriggerJournalEntry\",\n        type: \"script\",\n        img: \"icons/svg/book.svg\",\n        command: `let macroPP = game.macros.getName(\"PressurePlate\").id;\n        let macroTVT = game.macros.getName(\"Tiles Visibility Toggle\").id;\n        let macroBCB = game.macros.getName(\"BassClef Blue\").id;\n        let macroBCG = game.macros.getName(\"BassClef Green\").id;\n        let macroBCO = game.macros.getName(\"BassClef Orange\").id;\n        let macroBCP = game.macros.getName(\"BassClef Purple\").id;\n        let macroBQB = game.macros.getName(\"TrebleClef Blue\").id;\n        let macroBQG = game.macros.getName(\"TrebleClef Green\").id;\n        let macroBQO = game.macros.getName(\"TrebleClef Orange\").id;\n        let macroBQP = game.macros.getName(\"TrebleClef Purple\").id;\n        let macroCB = game.macros.getName(\"Flat Blue\").id;\n        let macroCG = game.macros.getName(\"Flat Green\").id;\n        let macroCO = game.macros.getName(\"Flat Orange\").id;\n        let macroCP = game.macros.getName(\"Flat Purple\").id;\n        let macroFB = game.macros.getName(\"Sharp Blue\").id;\n        let macroFG = game.macros.getName(\"Sharp Green\").id;\n        let macroFO = game.macros.getName(\"Sharp Orange\").id;\n        let macroFP = game.macros.getName(\"Sharp Purple\").id;\n        let macroQB = game.macros.getName(\"BeamedQuavers Blue\").id;\n        let macroQG = game.macros.getName(\"BeamedQuavers Green\").id;\n        let macroQO = game.macros.getName(\"BeamedQuavers Orange\").id;\n        let macroQP = game.macros.getName(\"BeamedQuavers Purple\").id;\n        let macroSB = game.macros.getName(\"Crotchet Blue\").id;\n        let macroSG = game.macros.getName(\"Crotchet Green\").id;\n        let macroSO = game.macros.getName(\"Crotchet Orange\").id;\n        let macroSP = game.macros.getName(\"Crotchet Purple\").id;\n        let macroTCB = game.macros.getName(\"Quaver Blue\").id;\n        let macroTCG = game.macros.getName(\"Quaver Green\").id;\n        let macroTCO = game.macros.getName(\"Quaver Orange\").id;\n        let macroTCP = game.macros.getName(\"Quaver Purple\").id;\n        \n        \n        \n        \n        var journalTrigger = game.journal.getName(\"Trigger\");\n        \n        //define the \"content\" that will be pasted into the Trigger Journal Entry\n        const content = \"@Token[PressurePlate]@Trigger[capture move]@Macro[\" + macroPP +  \"]{PressurePlate}\"+\"<br>\"+\n        \"@Token[Tiles Visibility Toggle]@Trigger[capture move]@Macro[\" + macroTVT + \"]{Tiles Visibility Toggle}\"+\"<br><br>\"+\n        \"@Token[BassClef Blue]@Trigger[capture move]@Macro[\" + macroBCB + \"]{BassClef Blue}\"+\"<br>\"+\n        \"@Token[BassClef Green]@Trigger[capture move]@Macro[\" + macroBCG + \"]{BassClef Green}\"+\"<br>\"+\n        \"@Token[BassClef Orange]@Trigger[capture move]@Macro[\" + macroBCO + \"]{BassClef Orange}\"+\"<br>\"+\n        \"@Token[BassClef Purple]@Trigger[capture move]@Macro[\" + macroBCP + \"]{BassClef Purple}\"+\"<br><br>\"+\n        \"@Token[TrebleClef Blue]@Trigger[capture move]@Macro[\" + macroBQB + \"]{TrebleClef Blue}\"+\"<br>\"+\n        \"@Token[TrebleClef Green]@Trigger[capture move]@Macro[\" + macroBQG + \"]{TrebleClef Green}\"+\"<br>\"+\n        \"@Token[TrebleClef Orange]@Trigger[capture move]@Macro[\" + macroBQO + \"]{TrebleClef Orange}\"+\"<br>\"+\n        \"@Token[TrebleClef Purple]@Trigger[capture move]@Macro[\" + macroBQP + \"]{TrebleClef Purple}\"+\"<br><br>\"+\n        \"@Token[Flat Blue]@Trigger[capture move]@Macro[\" + macroCB  + \"]{Flat Blue}\"+\"<br>\"+\n        \"@Token[Flat Green]@Trigger[capture move]@Macro[\" + macroCG  + \"]{Flat Green}\"+\"<br>\"+\n        \"@Token[Flat Orange]@Trigger[capture move]@Macro[\" + macroCO  + \"]{Flat Orange}\"+\"<br>\"+\n        \"@Token[Flat Purple]@Trigger[capture move]@Macro[\" + macroCP  + \"]{Flat Purple}\"+\"<br><br>\"+\n        \"@Token[Sharp Blue]@Trigger[capture move]@Macro[\" + macroFB  + \"]{Sharp Blue}\"+\"<br>\"+\n        \"@Token[Sharp Green]@Trigger[capture move]@Macro[\" + macroFG  + \"]{Sharp Green}\"+\"<br>\"+\n        \"@Token[Sharp Orange]@Trigger[capture move]@Macro[\" + macroFO  + \"]{Sharp Orange}\"+\"<br>\"+\n        \"@Token[Sharp Purple]@Trigger[capture move]@Macro[\" + macroFP  + \"]{Sharp Purple}\"+\"<br><br>\"+\n        \"@Token[Beamed Quavers Blue]@Trigger[capture move]@Macro[\" + macroQB  + \"]{BeamedQuavers Blue}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Green]@Trigger[capture move]@Macro[\" + macroQG  + \"]{BeamedQuavers Green}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Orange]@Trigger[capture move]@Macro[\" + macroQO  + \"]{BeamedQuavers Orange}\"+\"<br>\"+\n        \"@Token[Beamed Quavers Purple]@Trigger[capture move]@Macro[\" + macroQP  + \"]{BeamedQuavers Purple}\"+\"<br><br>\"+\n        \"@Token[Crotchet Blue]@Trigger[capture move]@Macro[\" + macroSB  + \"]{Crotchet Blue}\"+\"<br>\"+\n        \"@Token[Crotchet Green]@Trigger[capture move]@Macro[\" + macroSG  + \"]{Crotchet Green}\"+\"<br>\"+\n        \"@Token[Crotchet Orange]@Trigger[capture move]@Macro[\" + macroSO  + \"]{Crotchet Orange}\"+\"<br>\"+\n        \"@Token[Crotchet Purple]@Trigger[capture move]@Macro[\" + macroSP  + \"]{Crotchet Purple}\"+\"<br><br>\"+\n        \"@Token[Quaver Blue]@Trigger[capture move]@Macro[\" + macroTCB + \"]{Quaver Blue}\"+\"<br>\"+\n        \"@Token[Quaver Green]@Trigger[capture move]@Macro[\" + macroTCG + \"]{Quaver Green}\"+\"<br>\"+\n        \"@Token[Quaver Orange]@Trigger[capture move]@Macro[\" + macroTCO + \"]{Quaver Orange}\"+\"<br>\"+\n        \"@Token[Quaver Purple]@Trigger[capture move]@Macro[\" + macroTCP + \"]{Quaver Purple}\"+\"<br><hr>\";\n        \n        //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n        journalTrigger.update({content: content});`  \n    },\n    {\n        name: \"PressurePlate\",\n        type: \"script\",\n        img: \"icons/environment/traps/pressure-plate.webp\",\n        command: `//These lines starting with a \"//\" or surrounded by \"/*\" and \"*/\" are comments that are ignored when executing the macro.\n        //This macro checks the content of two Journal Entries. If they're the same, the players have solved it \n        //and the doors will open. \n        //I've added a Timer that will reset the chamber after a few seconds !\n        \n        //We define here the name of the two Journal Entries we're going to check against each other\n        var journalGMName = game.journal.getName(\"GMSolution\");\n        var journalPName = game.journal.getName(\"PlayerEntry\");\n        \n        //Let's define the Pressure Plate as well so we can play the animation from it.\n        const plateName = \\`PressurePlate\\`;\n        var mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        \n        //This is where I define the path to each animations. file is the folder and each animation is stored into its own variable \n        let file = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        \n        let aa = \\`\\${file}BassClef_01_Regular_Blue_200x200.webm\\`;\n        let ab = \\`\\${file}BassClef_01_Regular_Green_200x200.webm\\`;\n        let ac = \\`\\${file}BassClef_01_Regular_Orange_200x200.webm\\`;\n        let ad = \\`\\${file}BassClef_01_Regular_Purple_200x200.webm\\`;\n        let ae = \\`\\${file}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n        let af = \\`\\${file}TrebleClef_01_Regular_Green_200x200.webm\\`;\n        let ag = \\`\\${file}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        let ah = \\`\\${file}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n        \n        let ba = \\`\\${file}Flat_01_Regular_Blue_200x200.webm\\`;\n        let bb = \\`\\${file}Flat_01_Regular_Green_200x200.webm\\`;\n        let bc = \\`\\${file}Flat_01_Regular_Orange_200x200.webm\\`;\n        let bd = \\`\\${file}Flat_01_Regular_Purple_200x200.webm\\`;\n        let be = \\`\\${file}Sharp_01_Regular_Blue_200x200.webm\\`;\n        let bf = \\`\\${file}Sharp_01_Regular_Green_200x200.webm\\`;\n        let bg = \\`\\${file}Sharp_01_Regular_Orange_200x200.webm\\`;\n        let bh = \\`\\${file}Sharp_01_Regular_Purple_200x200.webm\\`;\n        \n        let ca = \\`\\${file}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n        let cb = \\`\\${file}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n        let cc = \\`\\${file}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        let cd = \\`\\${file}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n        let ce = \\`\\${file}Crotchet_01_Regular_Blue_200x200.webm\\`;\n        let cf = \\`\\${file}Crotchet_01_Regular_Green_200x200.webm\\`;\n        let cg = \\`\\${file}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        let ch = \\`\\${file}Crotchet_01_Regular_Purple_200x200.webm\\`;\n        let ci = \\`\\${file}Quaver_01_Regular_Blue_200x200.webm\\`;\n        let cj = \\`\\${file}Quaver_01_Regular_Green_200x200.webm\\`;\n        let ck = \\`\\${file}Quaver_01_Regular_Orange_200x200.webm\\`;\n        let cl = \\`\\${file}Quaver_01_Regular_Purple_200x200.webm\\`;\n        \n        \n        //Pull a random colour from the BassClef or TrebleClef animations\n        function random_itemA(itemsA)\n        {\n        return itemsA[Math.floor(Math.random()*itemsA.length)];\n        }\n        \n        var itemsA = [aa, ab, ac, ad, ae, af, ag, ah];\n        \n        //Sharp or Flat\n        function random_itemB(itemsB)\n        {\n        return itemsB[Math.floor(Math.random()*itemsB.length)];\n        }\n        \n        var itemsB = [ba, bb ,bc, bd, be, bf, bg, bh];\n        \n        //Notes\n        function random_itemC(itemsC)\n        {\n        return itemsC[Math.floor(Math.random()*itemsC.length)];\n        }\n        \n        var itemsC = [ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl];\n        \n        \n        \n        \n        //This returns an error to the user if FXMaster is not installed\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        //This whole \"Pressure Plate\" function will be executed at the end. We use an if statement to check if the two journal entries are exactly the same.\n        //If they are, we open the three doors, reveal the portal. They've done it !\n        //if not (what is in the else statement) We reset the puzzle, cast the new four animations pattern, paste it in the GM Journal Entry, reset the Player's Journal Entry,\n        //and close the doors and hide the tiles and we send a message to the GM with links to the Journal Entries !\n        async function PressurePlate() {\n        \n        //The console.log allows to output some text, for example here, to check if the function has been executed.\n        //console.log(\"Inside the PressurePlate Function\");\n        \n        //The if statement below means this : if journal entries are the same, Puzzle is resolved, the doors open and the tile (portal) is revealed \n        if (journalGMName.data.content === journalPName.data.content){\n          \n          //Let's call the macro that toggle the doors open (if they're already open, they will close instead ! )\n          const DoorsStateToggle = game.macros.getName(\"Doors State Toggle\");\n          DoorsStateToggle.execute();\n          //We set an await, a delay in milliseconds, 1000 will roughly be equivalent to 1 second.\n          \n            //This is the countdown timer section\n          journalPName.update({content: \\`<h1>You have 5 seconds to exit the chamber</h1>\\`});\n          //We set an await, a delay in milliseconds, 1000 will roughly be equivalent to 1 second.\n          await wait (2000); \n          journalPName.update({content: \\`<h1>4</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>3</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>2</h1>\\`});\n          await wait (1000); \n          console.log(\"2\");\n          await wait (1000); \n          journalPName.update({content: \\`<h1>1</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\`<h1>0</h1>\\`});\n          await wait (1000); \n          journalPName.update({content: \\` \\`});\n          //Here we close the doors from the macro \"Door State Toggle\"\n          DoorsStateToggle.execute();\n          \n          //Here I'll trigger another macro that will only draw a new random pattern in the GM's Journal Entry\n          const pattern = game.macros.getName(\"Create New Pattern\");\n          await wait (100);\n          pattern.execute();\n          \n        \n        \n        }\n        // else (if 2 journal Entries are different, draw a new pattern as four animations, four images in the GM journal entry and reset the player's journal entry\n        else{\n          //We're going to prepare everything Foudnry will have to do when we call upon this \"CastA\"function\n          //We're picking at random from the items A which are the Treble Clefs and Bass Clefs. We'll do the same \n          //for the next function \"CastB\" but with sharps and flats, then all the notes will be picked at random \n          //in the  \"CastC\" function (that we'll call twice, we'll see that a bit later on)\n        async function CastA() {\n        \n        \n        let spellAnim = \n                            {\n                             file: random_itemA(itemsA),\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: 1,\n                               y: 1\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (500);\n        \n        //Here, I'm manipulating html text to truncate the path and replace it with the one for the webp thumbnail image\n        //that I'll use to paste in the journal entry\n        const path = spellAnim.file.substr(52);\n        const thumb = path.slice(0, -12) + \"Thumb.webp\";\n        const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n        const imgWidth = \"100\";\n        \n        //define \"content\" that will be pasted into the GM's Journal Entry\n        const content = \\` <img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        \n        //Straight up replace anything that was already in the GM's Journal Entry by the first picture (defined as a variable above)\n        journalGMName.update({content: content});\n        \n        \n        \n        }\n        async function CastB() {\n         \n          \n          let spellAnim = \n                              {\n                               file: random_itemB(itemsB),\n                                position: mainTarget.center,\n                                anchor: {\n                                 x: 0.5,\n                                 y: 1\n                                },\n                                angle: 0,\n                                scale: {\n                                 x: 1,\n                                 y: 1\n                                }\n                              }; \n          canvas.specials.playVideo(spellAnim);\n          game.socket.emit('module.fxmaster', spellAnim);\n          await wait (500);\n          const source = canvas.tokens.controlled[0];\n          const path = spellAnim.file.substr(52);\n          const thumb = path.slice(0, -12) + \"Thumb.webp\";\n          const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n          const imgWidth = \"100\";\n        \n        \n          const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n          \n          journalGMName.update({content: journalGMName.data.content + content});\n        \n          \n          }\n          async function CastC() {\n            \n            \n            let spellAnim = \n                                {\n                                 file: random_itemC(itemsC),\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: 1,\n                                   y: 1\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (500);\n            const source = canvas.tokens.controlled[0];\n            const path = spellAnim.file.substr(52);\n            const thumb = path.slice(0, -12) + \"Thumb.webp\";\n            const webP = \\`\\${file}\\` + \\`\\${thumb}\\`;\n            const imgWidth = \"100\";\n            \n        \n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n          journalGMName.update({content: journalGMName.data.content + content});    \n            \n            }\n            \n        //ChatMessage to GM with the two Journal Entries linked remove the \"/*\" and \"*/\" to test it. It can clutter if there are two many PressurePlate activations !\n        /*\n        let chatData = {\n           \n          content: \\`Someone changed the pattern ! <br> @JournalEntry[\\${journalGMName.data.name}] <br> @JournalEntry[\\${journalPName.data.name}]\\`,\n          whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n        };\n        ChatMessage.create(chatData, {});\n        */\n        \n        \n         //Reset the Player's Journal Entry (with a single space to avoid a null)\n         const content = \\` \\`;\n         journalPName.update({content: content});\n        \n         //Now all the functions are ready to be executed. \"CastA\" once, \"CastB\" once and \"CastC\" twice, close the all thing \n         //and call the overall function called \"PressurePlate\"\n        CastA ();\n        await wait (750);\n        CastB();\n        await wait (750);\n        CastC ();\n        await wait (750);\n        CastC ();\n        await wait (750);\n          }\n        }\n        PressurePlate();`  \n    },\n    \n    {\n        name: \"BassClef Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`BassClef Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}BassClef_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"BassClef Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`BassClef Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}BassClef_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"BassClef Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`BassClef Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}BassClef_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"BassClef Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BassClef_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`BassClef Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}BassClef_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"TrebleClef Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`TrebleClef Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}TrebleClef_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"TrebleClef Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`TrebleClef Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}TrebleClef_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"TrebleClef Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`TrebleClef Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}TrebleClef_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"TrebleClef Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/TrebleClef_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`TrebleClef Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}TrebleClef_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Flat Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Flat Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Flat_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Flat Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Flat Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Flat_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Flat Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Flat Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Flat_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Flat Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Flat_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Flat Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Flat_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Sharp Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Sharp Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Sharp_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Sharp Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Sharp Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Sharp_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Sharp Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Sharp Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Sharp_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Sharp Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Sharp_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Sharp Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Sharp_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Crotchet Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Crotchet Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Crotchet_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Crotchet Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Crotchet Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Crotchet_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Crotchet Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Crotchet Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Crotchet_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Crotchet Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Crotchet_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Crotchet Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Crotchet_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"Quaver Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Quaver Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}Quaver_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"Quaver Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Quaver Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}Quaver_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"Quaver Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Quaver Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}Quaver_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"Quaver Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/Quaver_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Quaver Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}Quaver_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    },\n\n    {\n        name: \"BeamedQuavers Blue\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Blue_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n//First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\nconst journalName = \"PlayerEntry\";\n//plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\nconst plateName = \\`Beamed Quavers Blue\\`;\n//folder 01 is the directory path to the animation triggered by this macro\nlet folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n//anFile is the name of the animation we're using\nlet anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Blue_200x200.webm\\`;\n\n///Check if Module dependencies are installed or returns an error to the user\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n\n//Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\n//The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n//at the beginning of the macro\nlet mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n//The scale will be proportional to the size of the mainTarget\nlet tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: mainTarget.center,\n                      anchor: {\n                       x: 0.5,\n                       y: 1\n                      },\n                      angle: 0,\n                      scale: {\n                       x: tarScale,\n                       y: tarScale\n                      }\n                    }; \ncanvas.specials.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\nawait wait (75);\n//Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n//that we're going to display in the Journal Entry\nvar path = spellAnim.file.substr(52);\nvar thumb = path.slice(0, -12) + \"Thumb.webp\";\nvar webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\nvar imgWidth = \"100\";\n//Class=\"secret means that this text/image will be only visible to the GM\"\nconst content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\nconst journal = game.journal.getName(journalName);\n//Here, we add text to the Journal Entry\n//journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\njournal.update({content: journal.data.content + content});\n}\n//Last step now that the function is ready, has all the parameters...execute the function\nCast ();\n`\n    },\n    {\n        name: \"BeamedQuavers Green\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Green_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n    //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n    const journalName = \"PlayerEntry\";\n    //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n    const plateName = \\`Beamed Quavers Green\\`;\n    //folder 01 is the directory path to the animation triggered by this macro\n    let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n    //anFile is the name of the animation we're using\n    let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Green_200x200.webm\\`;\n    \n    ///Check if Module dependencies are installed or returns an error to the user\n    if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    \n    //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n    \n    const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n    async function Cast() {\n    //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n    //at the beginning of the macro\n    let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n    //The scale will be proportional to the size of the mainTarget\n    let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n    \n    \n    let spellAnim = \n                        {\n                         file: anFile,\n                          position: mainTarget.center,\n                          anchor: {\n                           x: 0.5,\n                           y: 1\n                          },\n                          angle: 0,\n                          scale: {\n                           x: tarScale,\n                           y: tarScale\n                          }\n                        }; \n    canvas.specials.playVideo(spellAnim);\n    game.socket.emit('module.fxmaster', spellAnim);\n    await wait (75);\n    //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n    //that we're going to display in the Journal Entry\n    var path = spellAnim.file.substr(52);\n    var thumb = path.slice(0, -12) + \"Thumb.webp\";\n    var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n    var imgWidth = \"100\";\n    //Class=\"secret means that this text/image will be only visible to the GM\"\n    const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n    const journal = game.journal.getName(journalName);\n    //Here, we add text to the Journal Entry\n    //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n    journal.update({content: journal.data.content + content});\n    }\n    //Last step now that the function is ready, has all the parameters...execute the function\n    Cast ();\n    `\n    },\n    {\n        name: \"BeamedQuavers Orange\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Orange_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n        //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n        const journalName = \"PlayerEntry\";\n        //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n        const plateName = \\`Beamed Quavers Orange\\`;\n        //folder 01 is the directory path to the animation triggered by this macro\n        let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n        //anFile is the name of the animation we're using\n        let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Orange_200x200.webm\\`;\n        \n        ///Check if Module dependencies are installed or returns an error to the user\n        if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n        \n        //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n        \n        const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n        \n        async function Cast() {\n        //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n        //at the beginning of the macro\n        let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n        //The scale will be proportional to the size of the mainTarget\n        let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n        \n        \n        let spellAnim = \n                            {\n                             file: anFile,\n                              position: mainTarget.center,\n                              anchor: {\n                               x: 0.5,\n                               y: 1\n                              },\n                              angle: 0,\n                              scale: {\n                               x: tarScale,\n                               y: tarScale\n                              }\n                            }; \n        canvas.specials.playVideo(spellAnim);\n        game.socket.emit('module.fxmaster', spellAnim);\n        await wait (75);\n        //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n        //that we're going to display in the Journal Entry\n        var path = spellAnim.file.substr(52);\n        var thumb = path.slice(0, -12) + \"Thumb.webp\";\n        var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n        var imgWidth = \"100\";\n        //Class=\"secret means that this text/image will be only visible to the GM\"\n        const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n        const journal = game.journal.getName(journalName);\n        //Here, we add text to the Journal Entry\n        //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n        journal.update({content: journal.data.content + content});\n        }\n        //Last step now that the function is ready, has all the parameters...execute the function\n        Cast ();\n        `\n    },\n    {\n        name: \"BeamedQuavers Purple\",\n        type: \"script\",\n        img: \"modules/jb2a_patreon/Library/Generic/Music_Notation/BeamedQuavers_01_Regular_Purple_Thumb.webp\",\n        command: `//These lines starting with a \"//\" are comments that are ignored when executing the macro.\n            //First, we define a few things : The name of the Journal Entry this macro is going to populate with a new image\n            const journalName = \"PlayerEntry\";\n            //plateName is the name of the actor(pressure plate idea) that the player is going to step upon.\n            const plateName = \\`Beamed Quavers Purple\\`;\n            //folder 01 is the directory path to the animation triggered by this macro\n            let folder01 = \"modules/jb2a_patreon/Library/Generic/Music_Notation/\";\n            //anFile is the name of the animation we're using\n            let anFile = \\`\\${folder01}BeamedQuavers_01_Regular_Purple_200x200.webm\\`;\n            \n            ///Check if Module dependencies are installed or returns an error to the user\n            if (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n            \n            //Here we prepare a function with all the information it needs to play the animation, calling upon FXMaster\n            \n            const wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n            \n            async function Cast() {\n            //The animation will be coming from the plate, our \"mainTarget\", we say, find the token with the name \"plateName\" that we defined\n            //at the beginning of the macro\n            let mainTarget = canvas.tokens.placeables.find(i=> i.name === plateName);\n            //The scale will be proportional to the size of the mainTarget\n            let tarScale = ((mainTarget.data.width + mainTarget.data.height)/2);\n            \n            \n            let spellAnim = \n                                {\n                                 file: anFile,\n                                  position: mainTarget.center,\n                                  anchor: {\n                                   x: 0.5,\n                                   y: 1\n                                  },\n                                  angle: 0,\n                                  scale: {\n                                   x: tarScale,\n                                   y: tarScale\n                                  }\n                                }; \n            canvas.specials.playVideo(spellAnim);\n            game.socket.emit('module.fxmaster', spellAnim);\n            await wait (75);\n            //Here, I'm using the path of the asset and removing the text I don't need to replace it with the path of the thumbnail\n            //that we're going to display in the Journal Entry\n            var path = spellAnim.file.substr(52);\n            var thumb = path.slice(0, -12) + \"Thumb.webp\";\n            var webP = \\`\\${folder01}\\` + \\`\\${thumb}\\`;\n            var imgWidth = \"100\";\n            //Class=\"secret means that this text/image will be only visible to the GM\"\n            const content = \\`<img src = \"\\${webP}\" width = \"\\${imgWidth}\" /> \\`;\n            const journal = game.journal.getName(journalName);\n            //Here, we add text to the Journal Entry\n            //journal.data.content is what's already in the Journal Entry and we add what we defined just above as \"content\"\n            journal.update({content: journal.data.content + content});\n            }\n            //Last step now that the function is ready, has all the parameters...execute the function\n            Cast ();\n            `\n    }\n\n]\n\n\n\nfor (var i = 0; i < macroArray.length; i++) {\n\n    var macro = await Macro.create({\n        name: macroArray[i].name,\n        type: macroArray[i].type,\n        img: macroArray[i].img,\n        command: macroArray[i].command,\n        \"flags\": {\n            \"advanced-macros\": {\n                \"runAsGM\": true\n            }\n        }\n    }, { displaySheet: false });\n\n}","folder":null,"sort":0,"permission":{"default":0,"rdxUOt7EtLguWyxp":3},"flags":{"core":{"sourceId":"Macro.lXqk0P2h8fU0TcfK"},"advanced-macros":{"runAsGM":false}}}
